<?php

namespace App\Console\Commands;

use App\Models\Product;
use App\Models\Recommendation;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Phpml\FeatureExtraction\TokenCountVectorizer;
use Phpml\Tokenization\WhitespaceTokenizer;
use Phpml\Math\Distance\Euclidean;
use App\Models\VisitedProduct;

class makeRecommendations extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'makeRecommendations';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'This command is used to generate recommendations';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */

    public function handle()
    {
        //Declare a variable that carries all the concatenated text generated by productFeatures function
        $productFeatures = $this->productFeatures();

        //Initialize vectorizer
        $vectorizer = new TokenCountVectorizer(new WhitespaceTokenizer());

        //Passing the concatenated products features to fit function
        $vectorizer->fit($productFeatures);

        //Transform into matrix using transform function
        $vectorizer->transform($productFeatures);

        //Fetch last items visited by each user
        $visitedProducts = VisitedProduct::where('recommended', 0)->get();

        //Fetch all products records from the database
        $products = Product::all()->toArray();
        foreach ($visitedProducts as $visitedProduct) {
            $targeted_index = 0;
            foreach ($products as $product) {
                if($product['id'] == $visitedProduct->product_id) {
                    break;
                }
                $targeted_index++;
            }

            $item = $productFeatures[$targeted_index];
            $i = 0;
            foreach ($productFeatures as $productFeature) {
                $euclidean = new Euclidean();
                $products[$i]['score'] = $euclidean->distance($item, $productFeature);
                $i++;
            }

            usort($products, function ($a, $b) {
                return $a['score'] > $b['score'];
            });

            for($i= 1; $i< 9; $i++){
                Recommendation::create([
                    'user_id' => $visitedProduct->user_id,
                    'product_id' => $products[$i]['id'],
                    'score' => $products[$i]['score'],
                    'visited_product_id' => $visitedProduct->id
                ]);
            }
            $visitedProduct->recommended = true;
            $visitedProduct->save();
        }
    }

    public function productFeatures() {
        $products = DB::table('products')
            ->join('sub_categories', 'sub_categories.id', '=', 'products.sub_category_id')
            ->join('categories', 'categories.id', '=', 'sub_categories.category_id')
            ->selectRaw('concat(products.name, \' \', products.brand, \' \', products.sub_category_id, \' \', 
            sub_categories.name, \' \', categories.name, \' \', products.description) as full_text')
            ->get('full_text')->toArray();

        $minimizeText = [];

        foreach ($products as $product) {
            $minimizeText[] = $product->full_text;
        }

        return $minimizeText;
    }
}
